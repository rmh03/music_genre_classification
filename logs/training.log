2025-03-30 16:18:05 - INFO - Loading and preprocessing data...
2025-03-30 16:18:59 - INFO - Scaler saved to H:\ML project\Project\models\scaler.pkl
2025-03-30 16:18:59 - INFO - 
Training Traditional ML Models...
2025-03-30 16:18:59 - INFO - 
=== Training KNN ===
2025-03-30 16:18:59 - INFO - 
=== Training SVM ===
2025-03-30 16:18:59 - INFO - 
=== Training Logistic Regression ===
2025-03-30 16:18:59 - INFO - 
=== Training Decision Tree ===
2025-03-30 16:18:59 - INFO - 
=== Training Random Forest ===
2025-03-30 16:19:00 - INFO - KNN model saved to H:\ML project\Project\models\knn.pkl
2025-03-30 16:19:00 - INFO - SVM model saved to H:\ML project\Project\models\svm.pkl
2025-03-30 16:19:00 - INFO - Logistic Regression model saved to H:\ML project\Project\models\logistic_regression.pkl
2025-03-30 16:19:00 - INFO - Decision Tree model saved to H:\ML project\Project\models\decision_tree.pkl
2025-03-30 16:19:00 - INFO - Random Forest model saved to H:\ML project\Project\models\random_forest.pkl
2025-03-30 16:19:00 - INFO - 
Training Deep Learning Models...
2025-03-30 16:19:00 - INFO - 
=== Training CNN ===
2025-03-30 16:19:04 - INFO - 
=== Training LSTM ===
2025-03-30 16:19:10 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-30 16:19:10 - INFO - CNN model saved to H:\ML project\Project\models\cnn.h5
2025-03-30 16:19:10 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-30 16:19:10 - INFO - LSTM model saved to H:\ML project\Project\models\lstm.h5
2025-03-30 16:19:10 - INFO - Processing H:\ML project\Project\data\raw\genres_original\classical\classical.00000.wav...
2025-03-30 16:23:06 - INFO - Loading and preprocessing data...
2025-03-30 16:23:57 - INFO - Scaler saved to H:\ML project\Project\models\scaler.pkl
2025-03-30 16:23:57 - INFO - 
Training Traditional ML Models...
2025-03-30 16:23:57 - INFO - 
=== Training KNN ===
2025-03-30 16:23:57 - INFO - 
=== Training SVM ===
2025-03-30 16:23:57 - INFO - 
=== Training Logistic Regression ===
2025-03-30 16:23:57 - INFO - 
=== Training Decision Tree ===
2025-03-30 16:23:57 - INFO - 
=== Training Random Forest ===
2025-03-30 16:23:57 - INFO - KNN model saved to H:\ML project\Project\models\knn.pkl
2025-03-30 16:23:57 - INFO - SVM model saved to H:\ML project\Project\models\svm.pkl
2025-03-30 16:23:57 - INFO - Logistic Regression model saved to H:\ML project\Project\models\logistic_regression.pkl
2025-03-30 16:23:57 - INFO - Decision Tree model saved to H:\ML project\Project\models\decision_tree.pkl
2025-03-30 16:23:57 - INFO - Random Forest model saved to H:\ML project\Project\models\random_forest.pkl
2025-03-30 16:23:57 - INFO - 
Training Deep Learning Models...
2025-03-30 16:23:57 - INFO - 
=== Training CNN ===
2025-03-30 16:24:01 - INFO - 
=== Training LSTM ===
2025-03-30 16:24:07 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-30 16:24:07 - INFO - CNN model saved to H:\ML project\Project\models\cnn.h5
2025-03-30 16:24:07 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-30 16:24:07 - INFO - LSTM model saved to H:\ML project\Project\models\lstm.h5
2025-03-30 16:24:07 - INFO - Processing H:\ML project\Project\data\raw\genres_original\classical\classical.00000.wav...
2025-03-30 16:29:27 - INFO - Loading and preprocessing data...
2025-03-30 16:31:06 - INFO - Scaler saved to H:\ML project\Project\models\scaler.pkl
2025-03-30 16:31:06 - INFO - 
Training Traditional ML Models...
2025-03-30 16:31:06 - INFO - 
=== Training KNN ===
2025-03-30 16:31:07 - INFO - 
=== Training SVM ===
2025-03-30 16:31:07 - INFO - 
=== Training Logistic Regression ===
2025-03-30 16:31:07 - INFO - 
=== Training Decision Tree ===
2025-03-30 16:31:07 - INFO - 
=== Training Random Forest ===
2025-03-30 16:31:08 - INFO - KNN model saved to H:\ML project\Project\models\knn.pkl
2025-03-30 16:31:08 - INFO - SVM model saved to H:\ML project\Project\models\svm.pkl
2025-03-30 16:31:08 - INFO - Logistic Regression model saved to H:\ML project\Project\models\logistic_regression.pkl
2025-03-30 16:31:08 - INFO - Decision Tree model saved to H:\ML project\Project\models\decision_tree.pkl
2025-03-30 16:31:08 - INFO - Random Forest model saved to H:\ML project\Project\models\random_forest.pkl
2025-03-30 16:31:08 - INFO - 
Training Deep Learning Models...
2025-03-30 16:31:10 - INFO - 
=== Training CNN ===
2025-03-30 16:31:17 - INFO - 
=== Training LSTM ===
2025-03-30 16:31:30 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-30 16:31:30 - INFO - CNN model saved to H:\ML project\Project\models\cnn.h5
2025-03-30 16:31:30 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-30 16:31:30 - INFO - LSTM model saved to H:\ML project\Project\models\lstm.h5
2025-03-30 16:31:30 - INFO - Processing H:\ML project\Project\data\raw\genres_original\classical\classical.00000.wav...
2025-03-30 16:47:24 - INFO - Loading and preprocessing data...
2025-03-30 16:48:04 - INFO - Scaler saved to H:\ML project\Project\models\scaler.pkl
2025-03-30 16:48:04 - INFO - 
Training Traditional ML Models...
2025-03-30 16:48:04 - INFO - 
=== Training KNN ===
2025-03-30 16:48:04 - INFO - 
=== Training SVM ===
2025-03-30 16:48:04 - INFO - 
=== Training Logistic Regression ===
2025-03-30 16:48:04 - INFO - 
=== Training Decision Tree ===
2025-03-30 16:48:04 - INFO - 
=== Training Random Forest ===
2025-03-30 16:48:04 - INFO - KNN model saved to H:\ML project\Project\models\knn.pkl
2025-03-30 16:48:04 - INFO - SVM model saved to H:\ML project\Project\models\svm.pkl
2025-03-30 16:48:04 - INFO - Logistic Regression model saved to H:\ML project\Project\models\logistic_regression.pkl
2025-03-30 16:48:04 - INFO - Decision Tree model saved to H:\ML project\Project\models\decision_tree.pkl
2025-03-30 16:48:04 - INFO - Random Forest model saved to H:\ML project\Project\models\random_forest.pkl
2025-03-30 16:48:04 - INFO - 
Training Deep Learning Models...
2025-03-30 16:48:04 - INFO - 
=== Training CNN ===
2025-03-30 16:48:08 - INFO - 
=== Training LSTM ===
2025-03-30 16:48:15 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-30 16:48:15 - INFO - CNN model saved to H:\ML project\Project\models\cnn.h5
2025-03-30 16:48:15 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-30 16:48:15 - INFO - LSTM model saved to H:\ML project\Project\models\lstm.h5
2025-03-30 16:48:15 - INFO - Processing H:\ML project\Project\data\raw\genres_original\classical\classical.00000.wav...
2025-03-31 12:15:48 - INFO - Loading and preprocessing data...
2025-03-31 12:18:06 - INFO - Loading and preprocessing data...
2025-03-31 12:25:50 - INFO - Loading features from audio_features.csv...
2025-03-31 12:33:36 - INFO - Loading features from: H:/ML project/Project\data\processed\audio_features.csv
2025-03-31 12:33:36 - INFO - Scaler saved to H:/ML project/Project\models\scaler.pkl
2025-03-31 12:33:36 - INFO - 
Training Traditional ML Models...
2025-03-31 12:33:36 - INFO - 
=== Training KNN ===
2025-03-31 12:33:36 - INFO - 
=== Training SVM ===
2025-03-31 12:33:36 - INFO - 
=== Training Logistic Regression ===
2025-03-31 12:33:36 - INFO - 
=== Training Decision Tree ===
2025-03-31 12:33:36 - INFO - 
=== Training Random Forest ===
2025-03-31 12:33:37 - INFO - KNN model saved to H:/ML project/Project\models\knn.pkl
2025-03-31 12:33:37 - INFO - SVM model saved to H:/ML project/Project\models\svm.pkl
2025-03-31 12:33:37 - INFO - Logistic Regression model saved to H:/ML project/Project\models\logistic_regression.pkl
2025-03-31 12:33:37 - INFO - Decision Tree model saved to H:/ML project/Project\models\decision_tree.pkl
2025-03-31 12:33:37 - INFO - Random Forest model saved to H:/ML project/Project\models\random_forest.pkl
2025-03-31 12:33:37 - INFO - 
Training Deep Learning Models...
2025-03-31 12:33:37 - INFO - 
=== Training CNN ===
2025-03-31 12:33:40 - INFO - 
=== Training LSTM ===
2025-03-31 12:33:57 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 12:33:57 - INFO - CNN model saved to H:/ML project/Project\models\cnn.h5
2025-03-31 12:33:57 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 12:33:57 - INFO - LSTM model saved to H:/ML project/Project\models\lstm.h5
2025-03-31 12:55:55 - INFO - Loading features from audio_features.csv...
2025-03-31 12:55:55 - INFO - Scaler saved to H:/ML project/Project\models\scaler.pkl
2025-03-31 12:55:55 - INFO - 
Training Traditional ML Models with Hyperparameter Tuning...
2025-03-31 12:55:55 - INFO - 
=== Training KNN with Hyperparameter Tuning ===
2025-03-31 12:56:00 - INFO - Best Parameters for KNN: {'metric': 'manhattan', 'n_neighbors': 11, 'weights': 'distance'}
2025-03-31 12:56:00 - INFO - Best Accuracy for KNN: 0.5807
2025-03-31 12:56:00 - INFO - 
=== Training SVM with Hyperparameter Tuning ===
2025-03-31 12:56:00 - INFO - Best Parameters for SVM: {'C': 10, 'gamma': 'scale', 'kernel': 'rbf'}
2025-03-31 12:56:00 - INFO - Best Accuracy for SVM: 0.6521
2025-03-31 12:56:00 - INFO - 
=== Training Logistic Regression with Hyperparameter Tuning ===
2025-03-31 12:56:00 - INFO - Best Parameters for Logistic Regression: {'C': 1, 'solver': 'liblinear'}
2025-03-31 12:56:00 - INFO - Best Accuracy for Logistic Regression: 0.6145
2025-03-31 12:56:00 - INFO - 
=== Training Random Forest with Hyperparameter Tuning ===
2025-03-31 12:56:12 - INFO - Best Parameters for Random Forest: {'criterion': 'gini', 'max_depth': None, 'min_samples_split': 2, 'n_estimators': 100}
2025-03-31 12:56:12 - INFO - Best Accuracy for Random Forest: 0.6008
2025-03-31 12:56:12 - INFO - KNN model saved to H:/ML project/Project\models\knn_tuned.pkl
2025-03-31 12:56:12 - INFO - SVM model saved to H:/ML project/Project\models\svm_tuned.pkl
2025-03-31 12:56:12 - INFO - Logistic Regression model saved to H:/ML project/Project\models\logistic_regression_tuned.pkl
2025-03-31 12:56:12 - INFO - Random Forest model saved to H:/ML project/Project\models\random_forest_tuned.pkl
2025-03-31 12:56:12 - INFO - 
Training Deep Learning Models...
2025-03-31 12:56:12 - INFO - 
=== Training CNN ===
2025-03-31 12:56:16 - INFO - 
=== Training LSTM ===
2025-03-31 12:56:33 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 12:56:33 - INFO - CNN model saved to H:/ML project/Project\models\cnn.h5
2025-03-31 12:56:33 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 12:56:34 - INFO - LSTM model saved to H:/ML project/Project\models\lstm.h5
2025-03-31 13:02:06 - INFO - Loading features from audio_features.csv...
2025-03-31 13:02:06 - INFO - Scaler saved to H:/ML project/Project\models\scaler.pkl
2025-03-31 13:02:06 - INFO - 
Training Traditional ML Models with Hyperparameter Tuning...
2025-03-31 13:02:06 - INFO - 
=== Training KNN with Hyperparameter Tuning ===
2025-03-31 13:02:15 - INFO - Best Parameters for KNN: {'metric': 'manhattan', 'n_neighbors': 11, 'weights': 'distance'}
2025-03-31 13:02:15 - INFO - Best Accuracy for KNN: 0.5807
2025-03-31 13:02:15 - INFO - 
=== Training SVM with Hyperparameter Tuning ===
2025-03-31 13:02:15 - INFO - Best Parameters for SVM: {'C': 10, 'gamma': 'scale', 'kernel': 'rbf'}
2025-03-31 13:02:15 - INFO - Best Accuracy for SVM: 0.6521
2025-03-31 13:02:15 - INFO - 
=== Training Logistic Regression with Hyperparameter Tuning ===
2025-03-31 13:02:16 - INFO - Best Parameters for Logistic Regression: {'C': 1, 'solver': 'liblinear'}
2025-03-31 13:02:16 - INFO - Best Accuracy for Logistic Regression: 0.6145
2025-03-31 13:02:16 - INFO - 
=== Training Random Forest with Hyperparameter Tuning ===
2025-03-31 13:02:38 - INFO - Best Parameters for Random Forest: {'criterion': 'gini', 'max_depth': 20, 'min_samples_split': 2, 'n_estimators': 200}
2025-03-31 13:02:38 - INFO - Best Accuracy for Random Forest: 0.6107
2025-03-31 13:02:38 - INFO - KNN model saved to H:/ML project/Project\models\knn_tuned.pkl
2025-03-31 13:02:38 - INFO - SVM model saved to H:/ML project/Project\models\svm_tuned.pkl
2025-03-31 13:02:38 - INFO - Logistic Regression model saved to H:/ML project/Project\models\logistic_regression_tuned.pkl
2025-03-31 13:02:38 - INFO - Random Forest model saved to H:/ML project/Project\models\random_forest_tuned.pkl
2025-03-31 13:02:38 - INFO - 
Training Deep Learning Models...
2025-03-31 13:02:38 - INFO - 
=== Training CNN ===
2025-03-31 13:02:46 - INFO - 
=== Training LSTM ===
2025-03-31 13:03:17 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 13:03:17 - INFO - CNN model saved to H:/ML project/Project\models\cnn.h5
2025-03-31 13:03:17 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 13:03:18 - INFO - LSTM model saved to H:/ML project/Project\models\lstm.h5
2025-03-31 14:36:16 - INFO - Loading features from audio_features.csv...
2025-03-31 14:36:16 - INFO - Scaler saved to H:/ML project/Project\models\scaler.pkl
2025-03-31 14:36:16 - INFO - Selecting important features...
2025-03-31 14:36:16 - INFO - 
Training Traditional ML Models with Hyperparameter Tuning...
2025-03-31 14:36:16 - INFO - 
=== Training KNN with Hyperparameter Tuning ===
2025-03-31 14:36:22 - INFO - Best Parameters for KNN: {'metric': 'manhattan', 'n_neighbors': 10, 'weights': 'distance'}
2025-03-31 14:36:22 - INFO - Best Accuracy for KNN: 0.5494
2025-03-31 14:36:22 - INFO - 
=== Training SVM with Hyperparameter Tuning ===
2025-03-31 14:36:22 - INFO - Best Parameters for SVM: {'C': 10, 'gamma': 'scale', 'kernel': 'rbf'}
2025-03-31 14:36:22 - INFO - Best Accuracy for SVM: 0.6045
2025-03-31 14:36:22 - INFO - 
=== Training Logistic Regression with Hyperparameter Tuning ===
2025-03-31 14:36:22 - INFO - Best Parameters for Logistic Regression: {'C': 1, 'solver': 'lbfgs'}
2025-03-31 14:36:22 - INFO - Best Accuracy for Logistic Regression: 0.5644
2025-03-31 14:36:22 - INFO - 
=== Training Random Forest with Hyperparameter Tuning ===
2025-03-31 14:36:31 - INFO - Best Parameters for Random Forest: {'criterion': 'gini', 'max_depth': 20, 'min_samples_split': 5, 'n_estimators': 200}
2025-03-31 14:36:31 - INFO - Best Accuracy for Random Forest: 0.5820
2025-03-31 14:36:31 - INFO - KNN model saved to H:/ML project/Project\models\knn_tuned.pkl
2025-03-31 14:36:31 - INFO - SVM model saved to H:/ML project/Project\models\svm_tuned.pkl
2025-03-31 14:36:31 - INFO - Logistic Regression model saved to H:/ML project/Project\models\logistic_regression_tuned.pkl
2025-03-31 14:36:31 - INFO - Random Forest model saved to H:/ML project/Project\models\random_forest_tuned.pkl
2025-03-31 14:36:31 - INFO - 
Training Deep Learning Models...
2025-03-31 14:36:31 - INFO - 
=== Training CNN ===
2025-03-31 14:36:35 - INFO - 
=== Training LSTM ===
2025-03-31 14:36:44 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 14:36:44 - INFO - CNN model saved to H:/ML project/Project\models\cnn.h5
2025-03-31 14:36:44 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 14:36:44 - INFO - LSTM model saved to H:/ML project/Project\models\lstm.h5
2025-03-31 14:51:45 - INFO - Loading features from audio_features.csv...
2025-03-31 14:51:45 - INFO - Scaler saved to H:/ML project/Project\models\scaler.pkl
2025-03-31 14:51:45 - INFO - Selecting important features...
2025-03-31 14:51:45 - INFO - Feature selector saved to H:/ML project/Project\models\feature_selector.pkl
2025-03-31 14:51:45 - INFO - 
Training Traditional ML Models with Hyperparameter Tuning...
2025-03-31 14:51:45 - INFO - 
=== Training KNN with Hyperparameter Tuning ===
2025-03-31 14:51:51 - INFO - Best Parameters for KNN: {'metric': 'manhattan', 'n_neighbors': 10, 'weights': 'distance'}
2025-03-31 14:51:51 - INFO - Best Accuracy for KNN: 0.5494
2025-03-31 14:51:51 - INFO - 
=== Training SVM with Hyperparameter Tuning ===
2025-03-31 14:51:51 - INFO - Best Parameters for SVM: {'C': 10, 'gamma': 'scale', 'kernel': 'rbf'}
2025-03-31 14:51:51 - INFO - Best Accuracy for SVM: 0.6045
2025-03-31 14:51:51 - INFO - 
=== Training Logistic Regression with Hyperparameter Tuning ===
2025-03-31 14:51:51 - INFO - Best Parameters for Logistic Regression: {'C': 1, 'solver': 'lbfgs'}
2025-03-31 14:51:51 - INFO - Best Accuracy for Logistic Regression: 0.5644
2025-03-31 14:51:51 - INFO - 
=== Training Random Forest with Hyperparameter Tuning ===
2025-03-31 14:52:00 - INFO - Best Parameters for Random Forest: {'criterion': 'gini', 'max_depth': 20, 'min_samples_split': 2, 'n_estimators': 200}
2025-03-31 14:52:00 - INFO - Best Accuracy for Random Forest: 0.5870
2025-03-31 14:52:00 - INFO - KNN model saved to H:/ML project/Project\models\knn_tuned.pkl
2025-03-31 14:52:00 - INFO - SVM model saved to H:/ML project/Project\models\svm_tuned.pkl
2025-03-31 14:52:00 - INFO - Logistic Regression model saved to H:/ML project/Project\models\logistic_regression_tuned.pkl
2025-03-31 14:52:00 - INFO - Random Forest model saved to H:/ML project/Project\models\random_forest_tuned.pkl
2025-03-31 14:52:00 - INFO - 
Training Deep Learning Models...
2025-03-31 14:52:00 - INFO - 
=== Training CNN ===
2025-03-31 14:52:05 - INFO - 
=== Training LSTM ===
2025-03-31 14:52:14 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 14:52:14 - INFO - CNN model saved to H:/ML project/Project\models\cnn.h5
2025-03-31 14:52:14 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 14:52:14 - INFO - LSTM model saved to H:/ML project/Project\models\lstm.h5
2025-03-31 19:37:45 - INFO - Loading features from audio_features.csv...
2025-03-31 19:37:45 - INFO - Scaler saved to H:/ML project/Project\models\scaler.pkl
2025-03-31 19:37:45 - INFO - Selecting important features...
2025-03-31 19:37:46 - INFO - Feature selector saved to H:/ML project/Project\models\feature_selector.pkl
2025-03-31 19:37:46 - INFO - 
Training Traditional ML Models with Hyperparameter Tuning...
2025-03-31 19:37:46 - INFO - 
=== Training KNN with Hyperparameter Tuning ===
2025-03-31 19:37:50 - INFO - Best Parameters for KNN: {'metric': 'euclidean', 'n_neighbors': 8, 'weights': 'distance'}
2025-03-31 19:37:50 - INFO - Best Accuracy for KNN: 0.5608
2025-03-31 19:37:50 - INFO - 
=== Training SVM with Hyperparameter Tuning ===
2025-03-31 19:37:51 - INFO - Best Parameters for SVM: {'C': 10, 'gamma': 'scale', 'kernel': 'rbf'}
2025-03-31 19:37:51 - INFO - Best Accuracy for SVM: 0.6123
2025-03-31 19:37:51 - INFO - 
=== Training Logistic Regression with Hyperparameter Tuning ===
2025-03-31 19:37:51 - INFO - Best Parameters for Logistic Regression: {'C': 0.1, 'solver': 'lbfgs'}
2025-03-31 19:37:51 - INFO - Best Accuracy for Logistic Regression: 0.5851
2025-03-31 19:37:51 - INFO - 
=== Training Random Forest with Hyperparameter Tuning ===
2025-03-31 19:37:58 - INFO - Best Parameters for Random Forest: {'criterion': 'gini', 'max_depth': 20, 'min_samples_split': 5, 'n_estimators': 200}
2025-03-31 19:37:58 - INFO - Best Accuracy for Random Forest: 0.5851
2025-03-31 19:37:58 - INFO - KNN model saved to H:/ML project/Project\models\knn_tuned.pkl
2025-03-31 19:37:58 - INFO - SVM model saved to H:/ML project/Project\models\svm_tuned.pkl
2025-03-31 19:37:58 - INFO - Logistic Regression model saved to H:/ML project/Project\models\logistic_regression_tuned.pkl
2025-03-31 19:37:58 - INFO - Random Forest model saved to H:/ML project/Project\models\random_forest_tuned.pkl
2025-03-31 19:37:58 - INFO - 
Training Deep Learning Models with Hyperparameter Tuning...
2025-03-31 19:37:58 - INFO - 
=== Tuning CNN ===
2025-03-31 19:37:58 - INFO - Training CNN with filters=64, kernel_size=3, dropout_rate=0.3, dense_units=128
2025-03-31 19:38:05 - INFO - CNN Validation Accuracy: 0.5733
2025-03-31 19:38:05 - INFO - Training CNN with filters=64, kernel_size=3, dropout_rate=0.3, dense_units=256
2025-03-31 19:38:09 - INFO - CNN Validation Accuracy: 0.5600
2025-03-31 19:38:09 - INFO - Training CNN with filters=64, kernel_size=3, dropout_rate=0.4, dense_units=128
2025-03-31 19:38:15 - INFO - CNN Validation Accuracy: 0.5600
2025-03-31 19:38:15 - INFO - Training CNN with filters=64, kernel_size=3, dropout_rate=0.4, dense_units=256
2025-03-31 19:38:21 - INFO - CNN Validation Accuracy: 0.5933
2025-03-31 19:38:21 - INFO - Training CNN with filters=64, kernel_size=5, dropout_rate=0.3, dense_units=128
2025-03-31 19:38:26 - INFO - CNN Validation Accuracy: 0.5667
2025-03-31 19:38:26 - INFO - Training CNN with filters=64, kernel_size=5, dropout_rate=0.3, dense_units=256
2025-03-31 19:38:30 - INFO - CNN Validation Accuracy: 0.5933
2025-03-31 19:38:30 - INFO - Training CNN with filters=64, kernel_size=5, dropout_rate=0.4, dense_units=128
2025-03-31 19:38:36 - INFO - CNN Validation Accuracy: 0.5467
2025-03-31 19:38:36 - INFO - Training CNN with filters=64, kernel_size=5, dropout_rate=0.4, dense_units=256
2025-03-31 19:38:41 - INFO - CNN Validation Accuracy: 0.5733
2025-03-31 19:38:41 - INFO - Training CNN with filters=128, kernel_size=3, dropout_rate=0.3, dense_units=128
2025-03-31 19:38:45 - INFO - CNN Validation Accuracy: 0.5733
2025-03-31 19:38:45 - INFO - Training CNN with filters=128, kernel_size=3, dropout_rate=0.3, dense_units=256
2025-03-31 19:38:49 - INFO - CNN Validation Accuracy: 0.5267
2025-03-31 19:38:49 - INFO - Training CNN with filters=128, kernel_size=3, dropout_rate=0.4, dense_units=128
2025-03-31 19:38:55 - INFO - CNN Validation Accuracy: 0.5867
2025-03-31 19:38:55 - INFO - Training CNN with filters=128, kernel_size=3, dropout_rate=0.4, dense_units=256
2025-03-31 19:38:59 - INFO - CNN Validation Accuracy: 0.5333
2025-03-31 19:38:59 - INFO - Training CNN with filters=128, kernel_size=5, dropout_rate=0.3, dense_units=128
2025-03-31 19:39:04 - INFO - CNN Validation Accuracy: 0.5600
2025-03-31 19:39:04 - INFO - Training CNN with filters=128, kernel_size=5, dropout_rate=0.3, dense_units=256
2025-03-31 19:39:08 - INFO - CNN Validation Accuracy: 0.5533
2025-03-31 19:39:08 - INFO - Training CNN with filters=128, kernel_size=5, dropout_rate=0.4, dense_units=128
2025-03-31 19:39:11 - INFO - CNN Validation Accuracy: 0.5333
2025-03-31 19:39:11 - INFO - Training CNN with filters=128, kernel_size=5, dropout_rate=0.4, dense_units=256
2025-03-31 19:39:16 - INFO - CNN Validation Accuracy: 0.5467
2025-03-31 19:39:16 - INFO - Best CNN Validation Accuracy: 0.5933
2025-03-31 19:39:16 - INFO - 
=== Tuning LSTM ===
2025-03-31 19:39:16 - INFO - Training LSTM with lstm_units=64, dropout_rate=0.3, dense_units=128
2025-03-31 19:39:24 - INFO - LSTM Validation Accuracy: 0.4400
2025-03-31 19:39:24 - INFO - Training LSTM with lstm_units=64, dropout_rate=0.3, dense_units=256
2025-03-31 19:39:31 - INFO - LSTM Validation Accuracy: 0.4467
2025-03-31 19:39:31 - INFO - Training LSTM with lstm_units=64, dropout_rate=0.4, dense_units=128
2025-03-31 19:39:38 - INFO - LSTM Validation Accuracy: 0.4667
2025-03-31 19:39:38 - INFO - Training LSTM with lstm_units=64, dropout_rate=0.4, dense_units=256
2025-03-31 19:39:45 - INFO - LSTM Validation Accuracy: 0.4133
2025-03-31 19:39:45 - INFO - Training LSTM with lstm_units=128, dropout_rate=0.3, dense_units=128
2025-03-31 19:39:56 - INFO - LSTM Validation Accuracy: 0.4267
2025-03-31 19:39:56 - INFO - Training LSTM with lstm_units=128, dropout_rate=0.3, dense_units=256
2025-03-31 19:40:16 - INFO - LSTM Validation Accuracy: 0.5400
2025-03-31 19:40:16 - INFO - Training LSTM with lstm_units=128, dropout_rate=0.4, dense_units=128
2025-03-31 19:40:23 - INFO - LSTM Validation Accuracy: 0.4467
2025-03-31 19:40:23 - INFO - Training LSTM with lstm_units=128, dropout_rate=0.4, dense_units=256
2025-03-31 19:40:32 - INFO - LSTM Validation Accuracy: 0.4733
2025-03-31 19:40:32 - INFO - Best LSTM Validation Accuracy: 0.5400
2025-03-31 19:40:32 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 19:40:32 - INFO - CNN model saved to H:/ML project/Project\models\cnn.h5
2025-03-31 19:40:32 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 19:40:32 - INFO - LSTM model saved to H:/ML project/Project\models\lstm.h5
2025-03-31 19:43:12 - INFO - Loading features from audio_features.csv...
2025-03-31 19:43:12 - INFO - Scaler saved to H:/ML project/Project\models\scaler.pkl
2025-03-31 19:43:12 - INFO - Selecting important features...
2025-03-31 19:43:12 - INFO - Feature selector saved to H:/ML project/Project\models\feature_selector.pkl
2025-03-31 19:43:12 - INFO - 
Training Traditional ML Models with Hyperparameter Tuning...
2025-03-31 19:43:12 - INFO - 
=== Training KNN with Hyperparameter Tuning ===
2025-03-31 19:43:17 - INFO - Best Parameters for KNN: {'metric': 'euclidean', 'n_neighbors': 8, 'weights': 'distance'}
2025-03-31 19:43:17 - INFO - Best Accuracy for KNN: 0.5608
2025-03-31 19:43:17 - INFO - 
=== Training SVM with Hyperparameter Tuning ===
2025-03-31 19:43:17 - INFO - Best Parameters for SVM: {'C': 10, 'gamma': 'scale', 'kernel': 'rbf'}
2025-03-31 19:43:17 - INFO - Best Accuracy for SVM: 0.6123
2025-03-31 19:43:17 - INFO - 
=== Training Logistic Regression with Hyperparameter Tuning ===
2025-03-31 19:43:17 - INFO - Best Parameters for Logistic Regression: {'C': 0.1, 'solver': 'lbfgs'}
2025-03-31 19:43:17 - INFO - Best Accuracy for Logistic Regression: 0.5851
2025-03-31 19:43:17 - INFO - 
=== Training Random Forest with Hyperparameter Tuning ===
2025-03-31 19:43:25 - INFO - Best Parameters for Random Forest: {'criterion': 'entropy', 'max_depth': None, 'min_samples_split': 2, 'n_estimators': 200}
2025-03-31 19:43:25 - INFO - Best Accuracy for Random Forest: 0.5851
2025-03-31 19:43:25 - INFO - KNN model saved to H:/ML project/Project\models\knn_tuned.pkl
2025-03-31 19:43:25 - INFO - SVM model saved to H:/ML project/Project\models\svm_tuned.pkl
2025-03-31 19:43:25 - INFO - Logistic Regression model saved to H:/ML project/Project\models\logistic_regression_tuned.pkl
2025-03-31 19:43:26 - INFO - Random Forest model saved to H:/ML project/Project\models\random_forest_tuned.pkl
2025-03-31 19:43:26 - INFO - 
Training Deep Learning Models with Hyperparameter Tuning...
2025-03-31 19:43:26 - INFO - 
=== Tuning CNN ===
2025-03-31 19:43:26 - INFO - Training CNN with filters=64, kernel_size=3, dropout_rate=0.3, dense_units=128
2025-03-31 19:43:30 - INFO - CNN Validation Accuracy: 0.5200
2025-03-31 19:43:30 - INFO - Training CNN with filters=64, kernel_size=3, dropout_rate=0.3, dense_units=256
2025-03-31 19:43:34 - INFO - CNN Validation Accuracy: 0.5800
2025-03-31 19:43:34 - INFO - Training CNN with filters=64, kernel_size=3, dropout_rate=0.4, dense_units=128
2025-03-31 19:43:41 - INFO - CNN Validation Accuracy: 0.5667
2025-03-31 19:43:41 - INFO - Training CNN with filters=64, kernel_size=3, dropout_rate=0.4, dense_units=256
2025-03-31 19:43:46 - INFO - CNN Validation Accuracy: 0.5467
2025-03-31 19:43:46 - INFO - Training CNN with filters=64, kernel_size=5, dropout_rate=0.3, dense_units=128
2025-03-31 19:43:52 - INFO - CNN Validation Accuracy: 0.5800
2025-03-31 19:43:52 - INFO - Training CNN with filters=64, kernel_size=5, dropout_rate=0.3, dense_units=256
2025-03-31 19:43:57 - INFO - CNN Validation Accuracy: 0.5667
2025-03-31 19:43:57 - INFO - Training CNN with filters=64, kernel_size=5, dropout_rate=0.4, dense_units=128
2025-03-31 19:44:01 - INFO - CNN Validation Accuracy: 0.5333
2025-03-31 19:44:01 - INFO - Training CNN with filters=64, kernel_size=5, dropout_rate=0.4, dense_units=256
2025-03-31 19:44:06 - INFO - CNN Validation Accuracy: 0.5933
2025-03-31 19:44:06 - INFO - Training CNN with filters=128, kernel_size=3, dropout_rate=0.3, dense_units=128
2025-03-31 19:44:11 - INFO - CNN Validation Accuracy: 0.5600
2025-03-31 19:44:11 - INFO - Training CNN with filters=128, kernel_size=3, dropout_rate=0.3, dense_units=256
2025-03-31 19:44:15 - INFO - CNN Validation Accuracy: 0.5333
2025-03-31 19:44:15 - INFO - Training CNN with filters=128, kernel_size=3, dropout_rate=0.4, dense_units=128
2025-03-31 19:44:19 - INFO - CNN Validation Accuracy: 0.5667
2025-03-31 19:44:19 - INFO - Training CNN with filters=128, kernel_size=3, dropout_rate=0.4, dense_units=256
2025-03-31 19:44:26 - INFO - CNN Validation Accuracy: 0.6067
2025-03-31 19:44:26 - INFO - Training CNN with filters=128, kernel_size=5, dropout_rate=0.3, dense_units=128
2025-03-31 19:44:30 - INFO - CNN Validation Accuracy: 0.5667
2025-03-31 19:44:30 - INFO - Training CNN with filters=128, kernel_size=5, dropout_rate=0.3, dense_units=256
2025-03-31 19:44:35 - INFO - CNN Validation Accuracy: 0.5400
2025-03-31 19:44:35 - INFO - Training CNN with filters=128, kernel_size=5, dropout_rate=0.4, dense_units=128
2025-03-31 19:44:41 - INFO - CNN Validation Accuracy: 0.5867
2025-03-31 19:44:41 - INFO - Training CNN with filters=128, kernel_size=5, dropout_rate=0.4, dense_units=256
2025-03-31 19:44:46 - INFO - CNN Validation Accuracy: 0.5600
2025-03-31 19:44:46 - INFO - Best CNN Validation Accuracy: 0.6067
2025-03-31 19:44:46 - INFO - 
=== Tuning LSTM ===
2025-03-31 19:44:46 - INFO - Training LSTM with lstm_units=64, dropout_rate=0.3, dense_units=128
2025-03-31 19:44:58 - INFO - LSTM Validation Accuracy: 0.4800
2025-03-31 19:44:58 - INFO - Training LSTM with lstm_units=64, dropout_rate=0.3, dense_units=256
2025-03-31 19:45:16 - INFO - LSTM Validation Accuracy: 0.4800
2025-03-31 19:45:16 - INFO - Training LSTM with lstm_units=64, dropout_rate=0.4, dense_units=128
2025-03-31 19:45:29 - INFO - LSTM Validation Accuracy: 0.4267
2025-03-31 19:45:29 - INFO - Training LSTM with lstm_units=64, dropout_rate=0.4, dense_units=256
2025-03-31 19:45:40 - INFO - LSTM Validation Accuracy: 0.4533
2025-03-31 19:45:40 - INFO - Training LSTM with lstm_units=128, dropout_rate=0.3, dense_units=128
2025-03-31 19:45:59 - INFO - LSTM Validation Accuracy: 0.4667
2025-03-31 19:45:59 - INFO - Training LSTM with lstm_units=128, dropout_rate=0.3, dense_units=256
2025-03-31 19:46:29 - INFO - LSTM Validation Accuracy: 0.5400
2025-03-31 19:46:29 - INFO - Training LSTM with lstm_units=128, dropout_rate=0.4, dense_units=128
2025-03-31 19:46:46 - INFO - LSTM Validation Accuracy: 0.4400
2025-03-31 19:46:46 - INFO - Training LSTM with lstm_units=128, dropout_rate=0.4, dense_units=256
2025-03-31 19:46:59 - INFO - LSTM Validation Accuracy: 0.4533
2025-03-31 19:46:59 - INFO - Best LSTM Validation Accuracy: 0.5400
2025-03-31 19:46:59 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 19:46:59 - INFO - CNN model saved to H:/ML project/Project\models\cnn.h5
2025-03-31 19:46:59 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 19:46:59 - INFO - LSTM model saved to H:/ML project/Project\models\lstm.h5
2025-03-31 19:59:20 - INFO - Loading features from augmented_features.csv...
2025-03-31 20:01:50 - INFO - Loading features from augmented_features.csv...
2025-03-31 20:03:38 - INFO - Loading features from augmented_features.csv...
2025-03-31 20:03:38 - INFO - Non-numeric columns found: ['augmentation']. Dropping them.
2025-03-31 20:03:38 - INFO - Scaler saved to H:/ML project/Project\models\scaler.pkl
2025-03-31 20:03:38 - INFO - 
Training Traditional ML Models with Hyperparameter Tuning...
2025-03-31 20:03:38 - INFO - 
=== Training KNN with Hyperparameter Tuning ===
2025-03-31 20:03:53 - INFO - Best Parameters for KNN: {'metric': 'manhattan', 'n_neighbors': 2, 'weights': 'distance'}
2025-03-31 20:03:53 - INFO - Best Accuracy for KNN: 0.8362
2025-03-31 20:03:53 - INFO - 
=== Training SVM with Hyperparameter Tuning ===
2025-03-31 20:04:06 - INFO - Best Parameters for SVM: {'C': 10, 'gamma': 'scale', 'kernel': 'rbf'}
2025-03-31 20:04:06 - INFO - Best Accuracy for SVM: 0.8629
2025-03-31 20:04:06 - INFO - 
=== Training Logistic Regression with Hyperparameter Tuning ===
2025-03-31 20:04:08 - INFO - Best Parameters for Logistic Regression: {'C': 1, 'solver': 'lbfgs'}
2025-03-31 20:04:08 - INFO - Best Accuracy for Logistic Regression: 0.6615
2025-03-31 20:04:08 - INFO - 
=== Training Random Forest with Hyperparameter Tuning ===
2025-03-31 20:05:45 - INFO - Best Parameters for Random Forest: {'criterion': 'gini', 'max_depth': None, 'min_samples_split': 2, 'n_estimators': 200}
2025-03-31 20:05:45 - INFO - Best Accuracy for Random Forest: 0.8169
2025-03-31 20:05:45 - INFO - KNN model saved to H:/ML project/Project\models\knn_tuned.pkl
2025-03-31 20:05:45 - INFO - SVM model saved to H:/ML project/Project\models\svm_tuned.pkl
2025-03-31 20:05:45 - INFO - Logistic Regression model saved to H:/ML project/Project\models\logistic_regression_tuned.pkl
2025-03-31 20:05:45 - INFO - Random Forest model saved to H:/ML project/Project\models\random_forest_tuned.pkl
2025-03-31 20:05:45 - INFO - 
Training Deep Learning Models with Hyperparameter Tuning...
2025-03-31 20:05:45 - INFO - 
=== Tuning CNN ===
2025-03-31 20:05:45 - INFO - Training CNN with {'filters': 128, 'kernel_size': 3, 'dropout_rate': 0.4, 'dense_units': 256}
2025-03-31 20:06:39 - INFO - CNN Validation Accuracy: 0.8621
2025-03-31 20:06:39 - INFO - Training CNN with {'filters': 128, 'kernel_size': 5, 'dropout_rate': 0.3, 'dense_units': 128}
2025-03-31 20:07:24 - INFO - CNN Validation Accuracy: 0.8587
2025-03-31 20:07:24 - INFO - Training CNN with {'filters': 128, 'kernel_size': 5, 'dropout_rate': 0.3, 'dense_units': 256}
2025-03-31 20:07:59 - INFO - CNN Validation Accuracy: 0.8654
2025-03-31 20:07:59 - INFO - Training CNN with {'filters': 128, 'kernel_size': 5, 'dropout_rate': 0.4, 'dense_units': 256}
2025-03-31 20:08:30 - INFO - CNN Validation Accuracy: 0.8298
2025-03-31 20:08:30 - INFO - Training CNN with {'filters': 128, 'kernel_size': 3, 'dropout_rate': 0.3, 'dense_units': 256}
2025-03-31 20:09:10 - INFO - CNN Validation Accuracy: 0.8598
2025-03-31 20:09:10 - INFO - Best CNN Validation Accuracy: 0.8654
2025-03-31 20:09:10 - INFO - 
=== Tuning LSTM ===
2025-03-31 20:09:10 - INFO - Training LSTM with {'lstm_units': 64, 'dropout_rate': 0.3, 'dense_units': 128}
2025-03-31 20:09:41 - INFO - LSTM Validation Accuracy: 0.3660
2025-03-31 20:09:41 - INFO - Training LSTM with {'lstm_units': 128, 'dropout_rate': 0.3, 'dense_units': 128}
2025-03-31 20:12:14 - INFO - LSTM Validation Accuracy: 0.5306
2025-03-31 20:12:14 - INFO - Training LSTM with {'lstm_units': 64, 'dropout_rate': 0.4, 'dense_units': 256}
2025-03-31 20:13:21 - INFO - LSTM Validation Accuracy: 0.4316
2025-03-31 20:13:21 - INFO - Training LSTM with {'lstm_units': 64, 'dropout_rate': 0.4, 'dense_units': 128}
2025-03-31 20:15:12 - INFO - LSTM Validation Accuracy: 0.4794
2025-03-31 20:15:12 - INFO - Training LSTM with {'lstm_units': 128, 'dropout_rate': 0.4, 'dense_units': 128}
2025-03-31 20:16:38 - INFO - LSTM Validation Accuracy: 0.4549
2025-03-31 20:16:38 - INFO - Best LSTM Validation Accuracy: 0.5306
2025-03-31 20:16:38 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 20:16:38 - INFO - CNN model saved to H:/ML project/Project\models\cnn.h5
2025-03-31 20:16:38 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 20:16:38 - INFO - LSTM model saved to H:/ML project/Project\models\lstm.h5
2025-03-31 20:56:44 - INFO - Loading features from augmented_features.csv...
2025-03-31 20:56:44 - INFO - Non-numeric columns found: ['augmentation']. Dropping them.
2025-03-31 20:56:44 - INFO - Scaler saved to H:/ML project/Project\models\scaler.pkl
2025-03-31 20:56:44 - INFO - 
Training SVM Model...
2025-03-31 20:56:46 - INFO - SVM model saved to H:/ML project/Project\models\svm_tuned.pkl
2025-03-31 20:56:46 - INFO - 
Training Traditional ML Models with Hyperparameter Tuning...
2025-03-31 20:56:46 - INFO - 
=== Training KNN with Hyperparameter Tuning ===
2025-03-31 20:56:54 - INFO - Best Parameters for KNN: {'metric': 'manhattan', 'n_neighbors': 2, 'weights': 'distance'}
2025-03-31 20:56:54 - INFO - Best Accuracy for KNN: 0.8362
2025-03-31 20:56:54 - INFO - 
=== Training SVM with Hyperparameter Tuning ===
2025-03-31 20:57:02 - INFO - Best Parameters for SVM: {'C': 10, 'gamma': 'scale', 'kernel': 'rbf'}
2025-03-31 20:57:02 - INFO - Best Accuracy for SVM: 0.8629
2025-03-31 20:57:02 - INFO - 
=== Training Logistic Regression with Hyperparameter Tuning ===
2025-03-31 20:57:03 - INFO - Best Parameters for Logistic Regression: {'C': 1, 'solver': 'lbfgs'}
2025-03-31 20:57:03 - INFO - Best Accuracy for Logistic Regression: 0.6615
2025-03-31 20:57:03 - INFO - 
=== Training Random Forest with Hyperparameter Tuning ===
2025-03-31 20:58:19 - INFO - Best Parameters for Random Forest: {'criterion': 'entropy', 'max_depth': None, 'min_samples_split': 2, 'n_estimators': 200}
2025-03-31 20:58:19 - INFO - Best Accuracy for Random Forest: 0.8129
2025-03-31 20:58:19 - INFO - KNN model saved to H:/ML project/Project\models\knn_tuned.pkl
2025-03-31 20:58:19 - INFO - SVM model saved to H:/ML project/Project\models\svm_tuned.pkl
2025-03-31 20:58:19 - INFO - Logistic Regression model saved to H:/ML project/Project\models\logistic_regression_tuned.pkl
2025-03-31 20:58:19 - INFO - Random Forest model saved to H:/ML project/Project\models\random_forest_tuned.pkl
2025-03-31 20:58:19 - INFO - 
Training Deep Learning Models with Hyperparameter Tuning...
2025-03-31 20:58:19 - INFO - 
=== Tuning CNN ===
2025-03-31 20:58:19 - INFO - Training CNN with {'filters': 64, 'kernel_size': 5, 'dropout_rate': 0.3, 'dense_units': 128}
2025-03-31 20:58:40 - INFO - CNN Validation Accuracy: 0.8509
2025-03-31 20:58:40 - INFO - Training CNN with {'filters': 128, 'kernel_size': 5, 'dropout_rate': 0.3, 'dense_units': 256}
2025-03-31 20:58:58 - INFO - CNN Validation Accuracy: 0.8465
2025-03-31 20:58:58 - INFO - Training CNN with {'filters': 128, 'kernel_size': 3, 'dropout_rate': 0.4, 'dense_units': 256}
2025-03-31 20:59:23 - INFO - CNN Validation Accuracy: 0.8398
2025-03-31 20:59:23 - INFO - Training CNN with {'filters': 128, 'kernel_size': 5, 'dropout_rate': 0.3, 'dense_units': 128}
2025-03-31 20:59:47 - INFO - CNN Validation Accuracy: 0.8532
2025-03-31 20:59:47 - INFO - Training CNN with {'filters': 64, 'kernel_size': 3, 'dropout_rate': 0.3, 'dense_units': 128}
2025-03-31 21:00:02 - INFO - CNN Validation Accuracy: 0.8254
2025-03-31 21:00:02 - INFO - Best CNN Validation Accuracy: 0.8532
2025-03-31 21:00:02 - INFO - 
=== Tuning LSTM ===
2025-03-31 21:00:02 - INFO - Training LSTM with {'lstm_units': 128, 'dropout_rate': 0.3, 'dense_units': 128}
2025-03-31 21:02:02 - INFO - LSTM Validation Accuracy: 0.5895
2025-03-31 21:02:02 - INFO - Training LSTM with {'lstm_units': 64, 'dropout_rate': 0.4, 'dense_units': 128}
2025-03-31 21:02:51 - INFO - LSTM Validation Accuracy: 0.4205
2025-03-31 21:02:51 - INFO - Training LSTM with {'lstm_units': 128, 'dropout_rate': 0.4, 'dense_units': 256}
2025-03-31 21:04:58 - INFO - LSTM Validation Accuracy: 0.5106
2025-03-31 21:04:58 - INFO - Training LSTM with {'lstm_units': 64, 'dropout_rate': 0.4, 'dense_units': 256}
2025-03-31 21:06:09 - INFO - LSTM Validation Accuracy: 0.4461
2025-03-31 21:06:09 - INFO - Training LSTM with {'lstm_units': 64, 'dropout_rate': 0.3, 'dense_units': 128}
2025-03-31 21:07:59 - INFO - LSTM Validation Accuracy: 0.4739
2025-03-31 21:07:59 - INFO - Best LSTM Validation Accuracy: 0.5895
2025-03-31 21:07:59 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 21:07:59 - INFO - CNN model saved to H:/ML project/Project\models\cnn.h5
2025-03-31 21:07:59 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 21:07:59 - INFO - LSTM model saved to H:/ML project/Project\models\lstm.h5
2025-03-31 21:21:23 - INFO - Loading features from augmented_features.csv...
2025-03-31 21:21:23 - INFO - Non-numeric columns found: ['augmentation']. Dropping them.
2025-03-31 21:21:23 - INFO - Scaler saved to H:/ML project/Project\models\scaler.pkl
2025-03-31 21:21:23 - INFO - 
Training SVM Model...
2025-03-31 21:21:25 - INFO - SVM model saved to H:/ML project/Project\models\svm_tuned.pkl
2025-03-31 21:21:25 - INFO - 
Training Traditional ML Models with Hyperparameter Tuning...
2025-03-31 21:21:25 - INFO - 
=== Training KNN with Hyperparameter Tuning ===
2025-03-31 21:21:32 - INFO - Best Parameters for KNN: {'metric': 'manhattan', 'n_neighbors': 3, 'weights': 'distance'}
2025-03-31 21:21:32 - INFO - Best Accuracy for KNN: 0.8329
2025-03-31 21:21:32 - INFO - 
=== Training SVM with Hyperparameter Tuning ===
2025-03-31 21:22:07 - INFO - Best Parameters for SVM: {'C': 10, 'gamma': 'scale', 'kernel': 'rbf'}
2025-03-31 21:22:07 - INFO - Best Accuracy for SVM: 0.8629
2025-03-31 21:22:07 - INFO - 
=== Training Random Forest with Hyperparameter Tuning ===
2025-03-31 21:23:20 - INFO - Best Parameters for Random Forest: {'criterion': 'gini', 'max_depth': 20, 'min_samples_split': 2, 'n_estimators': 200}
2025-03-31 21:23:20 - INFO - Best Accuracy for Random Forest: 0.8131
2025-03-31 21:23:20 - INFO - KNN model saved to H:/ML project/Project\models\knn_tuned.pkl
2025-03-31 21:23:20 - INFO - SVM model saved to H:/ML project/Project\models\svm_tuned.pkl
2025-03-31 21:23:20 - INFO - Random Forest model saved to H:/ML project/Project\models\random_forest_tuned.pkl
2025-03-31 21:23:20 - INFO - 
Training Deep Learning Models with Hyperparameter Tuning...
2025-03-31 21:23:20 - INFO - 
=== Tuning CNN ===
2025-03-31 21:23:20 - INFO - Training CNN with {'filters': 64, 'kernel_size': 5, 'dropout_rate': 0.4, 'dense_units': 256}
2025-03-31 21:23:44 - INFO - CNN Validation Accuracy: 0.8665
2025-03-31 21:23:44 - INFO - Training CNN with {'filters': 128, 'kernel_size': 3, 'dropout_rate': 0.3, 'dense_units': 256}
2025-03-31 21:24:10 - INFO - CNN Validation Accuracy: 0.8654
2025-03-31 21:24:10 - INFO - Training CNN with {'filters': 64, 'kernel_size': 3, 'dropout_rate': 0.3, 'dense_units': 128}
2025-03-31 21:24:28 - INFO - CNN Validation Accuracy: 0.8443
2025-03-31 21:24:28 - INFO - Training CNN with {'filters': 64, 'kernel_size': 3, 'dropout_rate': 0.4, 'dense_units': 256}
2025-03-31 21:24:48 - INFO - CNN Validation Accuracy: 0.8521
2025-03-31 21:24:48 - INFO - Training CNN with {'filters': 64, 'kernel_size': 5, 'dropout_rate': 0.3, 'dense_units': 256}
2025-03-31 21:25:04 - INFO - CNN Validation Accuracy: 0.8676
2025-03-31 21:25:04 - INFO - Best CNN Validation Accuracy: 0.8676
2025-03-31 21:25:04 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 21:25:04 - INFO - CNN model saved to H:/ML project/Project\models\cnn.h5
2025-03-31 21:28:23 - INFO - Loading features from augmented_features.csv...
2025-03-31 21:28:23 - INFO - Non-numeric columns found: ['augmentation']. Dropping them.
2025-03-31 21:28:23 - INFO - Scaler saved to H:/ML project/Project\models\scaler.pkl
2025-03-31 21:28:23 - INFO - 
Training Traditional ML Models with Hyperparameter Tuning...
2025-03-31 21:28:23 - INFO - 
=== Training KNN with Hyperparameter Tuning ===
2025-03-31 21:28:28 - INFO - Best Parameters for KNN: {'metric': 'manhattan', 'n_neighbors': 3, 'weights': 'distance'}
2025-03-31 21:28:28 - INFO - 
=== Training SVM with Hyperparameter Tuning ===
2025-03-31 21:29:03 - INFO - Best Parameters for SVM: {'C': 10, 'gamma': 'scale', 'kernel': 'rbf'}
2025-03-31 21:29:03 - INFO - 
=== Training Random Forest with Hyperparameter Tuning ===
2025-03-31 21:30:13 - INFO - Best Parameters for Random Forest: {'criterion': 'gini', 'max_depth': 20, 'min_samples_split': 2, 'n_estimators': 200}
2025-03-31 21:30:13 - INFO - KNN model saved to H:/ML project/Project\models\knn_tuned.pkl
2025-03-31 21:30:13 - INFO - SVM model saved to H:/ML project/Project\models\svm_tuned.pkl
2025-03-31 21:30:13 - INFO - Random Forest model saved to H:/ML project/Project\models\random_forest_tuned.pkl
2025-03-31 21:30:13 - INFO - 
Training Deep Learning Models with Hyperparameter Tuning...
2025-03-31 21:30:13 - INFO - 
=== Tuning CNN ===
2025-03-31 21:30:13 - INFO - Training CNN with {'filters': 128, 'kernel_size': 5, 'dropout_rate': 0.4, 'dense_units': 256}
2025-03-31 21:30:47 - INFO - Training CNN with {'filters': 64, 'kernel_size': 5, 'dropout_rate': 0.3, 'dense_units': 128}
2025-03-31 21:31:05 - INFO - Training CNN with {'filters': 64, 'kernel_size': 3, 'dropout_rate': 0.3, 'dense_units': 128}
2025-03-31 21:31:23 - INFO - Training CNN with {'filters': 128, 'kernel_size': 5, 'dropout_rate': 0.3, 'dense_units': 128}
2025-03-31 21:31:45 - INFO - Training CNN with {'filters': 64, 'kernel_size': 3, 'dropout_rate': 0.4, 'dense_units': 128}
2025-03-31 21:32:04 - WARNING - You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
2025-03-31 21:32:04 - INFO - CNN model saved to H:/ML project/Project\models\cnn.h5
